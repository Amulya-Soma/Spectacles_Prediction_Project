# -*- coding: utf-8 -*-
"""Specs project_Decision tree_Finalized model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ytgp5pOcDJPlObifL2UFZvXS1yb-3rCO
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Import Libraries"""

# Load libraries
import pandas as pd
from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier
from sklearn.model_selection import train_test_split # Import train_test_split function
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation

"""# Import Data"""

col_names = ['phone', 'Laptop', 'TV', 'Headaches', 'Blurry vision', 'Specs']
# load dataset
pima = pd.read_csv("/content/drive/MyDrive/AI Data/Ageremoved_dataset.csv")
pima.head()

"""# Data Split"""

#split dataset in features and target variable
feature_cols = ['phone', 'Laptop', 'TV', 'Headaches', 'Blurry vision']
X = pima[feature_cols] # Features
y = pima.Specs # Target variable

# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)

"""# Decision Tree Classifier Tree"""

# Create Decision Tree classifer object
clf = DecisionTreeClassifier()

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)

"""# Prediction Using Decision Tree"""

y_pred = clf.predict(X_train)

print("Accuracy:",metrics.accuracy_score(y_train, y_pred))

#Predict the response for test dataset
y_pred = clf.predict(X_test)

from sklearn.metrics import confusion_matrix  
cm= confusion_matrix(y_test, y_pred)
cm

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

"""# Model Visualization

Gini prediction for training
"""

# Create Decision Tree classifer object
clf = DecisionTreeClassifier(criterion="gini", max_depth=2)

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_train)

# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_train, y_pred))

"""Gini prediction for testing"""

# Create Decision Tree classifer object
clf = DecisionTreeClassifier(criterion="gini", max_depth=4)

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_test)

# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

from sklearn.tree import export_graphviz
from six import StringIO
from IPython.display import Image  
import pydotplus

dot_data = StringIO()
export_graphviz(clf, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True,feature_names = feature_cols,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png('spectacles.png')
Image(graph.create_png())

"""export_graphviz function converts decision tree classifier into dot file and pydotplus convert this dot file to png or displayable form on Jupyter.

# Decision Tree Optimization

Training data
"""

# Create Decision Tree classifer object
clf = DecisionTreeClassifier(criterion="entropy", max_depth=4)

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_train)

# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_train, y_pred))

"""Testing data

"""

# Create Decision Tree classifer object
clf = DecisionTreeClassifier(criterion="entropy", max_depth=4)

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_test)

# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

from six import StringIO 
from IPython.display import Image  
from sklearn.tree import export_graphviz
import pydotplus
dot_data = StringIO()
export_graphviz(clf, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True, feature_names = feature_cols,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png('spectacles_Entropy.png')
Image(graph.create_png())

"""#Save Model"""

import pickle
# Save the model
filename = 'model.pkl'
pickle.dump(clf, open(filename, 'wb'))

"""# Deployment"""

list_of_columns = ['phone', 'Laptop', 'TV', 'Headaches', 'Blurry vision']
input_data=pd.DataFrame(columns=list_of_columns)

input_data.at[0, 'phone'] = int(input('Enter hours spent on Phone'))
input_data.at[0, 'Laptop'] = int(input('Enter hours spent on Laptop'))
input_data.at[0, 'TV'] = int(input('Enter hours spent on TV'))
input_data.at[0, 'Headaches'] = int(input('Headache(1/0)'))
input_data.at[0, 'Blurry vision'] = int(input('Blurry vision(1/0)'))



model = pickle.load(open('model.pkl', 'rb'))
prediction = model.predict(input_data)
result = prediction[0]
if(result==1):
  print('You need spectacles')
else:
  print('You do not need spectacles')

"""#Thank You"""
# -*- coding: utf-8 -*-
"""Specs project_Random Forest_Finalized.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v10S8poMdXifzrLRbhqnbB5aXYp07ULQ

Mount Drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""Import Libraries"""

import numpy as nm  
import matplotlib.pyplot as mtp  
import pandas as pd

"""Load Data"""

data = pd.read_csv("/content/drive/MyDrive/AI Data/Ageremoved_dataset.csv")
data.head()

"""Data Split"""

#split dataset in features and target variable
feature_cols = ['phone', 'Laptop', 'TV', 'Headaches', 'Blurry vision']
X = data[feature_cols] 
y = data.Specs

# Split dataset into training set and test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)

"""Random Forest Model Training"""

#Fitting Decision Tree classifier to the training set  
from sklearn.ensemble import RandomForestClassifier  
classifier= RandomForestClassifier(n_estimators= 3, criterion="entropy")  
classifier.fit(X_train, y_train)

"""FOR TRAINING DATA"""

#Predicting the test set result  
y_pred= classifier.predict(X_train)

from sklearn.metrics import confusion_matrix  
cm= confusion_matrix(y_train, y_pred)
cm

from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation
print("Accuracy entropy training:",metrics.accuracy_score(y_train, y_pred))

"""FOR TESTING DATA

Prediction
"""

#Predicting the test set result  
y_pred= classifier.predict(X_test)

"""Model Metrics"""

#Creating the Confusion matrix  
from sklearn.metrics import confusion_matrix  
cm= confusion_matrix(y_test, y_pred)
cm

from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation
print("Accuracy entropy testing:",metrics.accuracy_score(y_test, y_pred))

"""Random Forest Model Training gini"""

#Fitting Decision Tree classifier to the training set  
from sklearn.ensemble import RandomForestClassifier  
classifier= RandomForestClassifier(n_estimators= 3, criterion="gini")  
classifier.fit(X_train, y_train)

"""Training Data Prediction gini"""

#Predicting the test set result  
y_pred= classifier.predict(X_train)

from sklearn.metrics import confusion_matrix  
cm= confusion_matrix(y_train, y_pred)
cm

from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation
print("Accuracy gini training ",metrics.accuracy_score(y_train, y_pred))

"""Testing Data"""

#Predicting the test set result  
y_pred= classifier.predict(X_test)

#Creating the Confusion matrix  
from sklearn.metrics import confusion_matrix  
cm= confusion_matrix(y_test, y_pred)
cm

from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation
print("Accuracy gini testing",metrics.accuracy_score(y_test, y_pred))

"""Save the Model"""

import pickle
# Save the model
filename = 'random_forest_model.pkl'
pickle.dump(classifier, open(filename, 'wb'))

"""# Depth based accuracy using entropy

Training
"""

# Create Decision Tree classifer object
classifier = RandomForestClassifier(criterion="entropy", max_depth=4)

# Train Decision Tree Classifer
classifier = classifier.fit(X_train,y_train)

#Predict the response for test dataset
y_pred = classifier.predict(X_test)

# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

"""Deployment"""

list_of_columns = data.columns
input_data=pd.DataFrame(columns=list_of_columns)
input_data.drop(['Specs'], axis='columns', inplace=True)

input_data.at[0, 'phone'] = float(input('phone = '))
input_data.at[0, 'Laptop'] = float(input('Laptop = '))
input_data.at[0, 'TV'] = float(input('TV = '))
input_data.at[0, 'Headaches'] = int(input('Headaches (1/0) '))
input_data.at[0, 'Blurry vision'] = int(input('Blurry vison (1/0) '))
y_pred =  classifier.predict(input_data)

if(y_pred[0]==1):
  print('You need Specs')
if(y_pred[0]==0):
  print('You dont need Specs')